services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=elastic-docker-cluster

      ## 3개의 노드 실행 시
      # - discovery.seed_hosts=es02,es03
      # - cluster.initial_master_nodes=es01,es02,es03
      
      ## 노드 하나만 실행 시
      - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01

      - node.roles=master,data,ingest
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - network.host=0.0.0.0
    volumes:
      - ./config/dictionary:/usr/share/elasticsearch/config/dictionary
    ports:
      - 9200:9200
    networks:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
      if [ ! -d /usr/share/elasticsearch/plugins/analysis-nori ]; then
        elasticsearch-plugin install analysis-nori --batch;
      fi &&
      exec /usr/local/bin/docker-entrypoint.sh elasticsearch"


  # es02:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
  #   container_name: es02
  #   environment:
  #     - node.name=es02
  #     - cluster.name=elastic-docker-cluster
  #     - discovery.seed_hosts=es01,es03
  #     - cluster.initial_master_nodes=es01,es02,es03
  #     - node.roles=master,data,ingest
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - xpack.security.enabled=false
  #     - network.host=0.0.0.0
  #   volumes:
  #     - ./config/dictionary:/usr/share/elasticsearch/config/dictionary
  #   ports:
  #     - 9201:9200
  #   networks:
  #     - elastic

  # es03:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
  #   container_name: es03
  #   environment:
  #     - node.name=es03
  #     - cluster.name=elastic-docker-cluster
  #     - discovery.seed_hosts=es01,es02
  #     - cluster.initial_master_nodes=es01,es02,es03
  #     - node.roles=master,data,ingest
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - xpack.security.enabled=false
  #     - network.host=0.0.0.0
  #   volumes:
  #     - ./config/dictionary:/usr/share/elasticsearch/config/dictionary
  #   ports:
  #     - 9202:9200
  #   networks:
  #     - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.1
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - XPACK_ALERTING_ENABLED=false
      - XPACK_ACTIONS_ENABLED=false
      - XPACK_RULE_REGISTRY_WRITE_ENABLED=false
      - TELEMETRY_ENABLED=false
      - XPACK_SECURITY_SOLUTION_ENABLED=false
      - XPACK_INFRA_ENABLED=false
      - XPACK_LOGS_ENABLED=false
      - XPACK_ALERTING_ENABLED=false
      - XPACK_APM_ENABLED=false
      - XPACK_FLEET_ENABLED=false
      - XPACK_SECURITY_SOLUTION_ENABLED=false
      - XPACK_OBSERVABILITY_ENABLED=false
      - XPACK_REPORTING_ENABLED=false
      - XPACK_ML_ENABLED=false
      - TELEMETRY_ENABLED=false
      - MONITORING_ENABLED=false
    ports:
      - 5601:5601
    networks:
      - elastic


  # (Day 3 - ws lv5에서만 사용)
  # logstash01:
  #   container_name: logstash01
  #   depends_on:
  #     es01:
  #       condition: service_healthy 
  #     postgres:
  #       condition: service_healthy
  #   image: docker.elastic.co/logstash/logstash-oss:8.17.1
  #   labels:
  #     co.elastic.logs/module: logstash
  #   user: root
  #   volumes:
  #     - ./logstashdata:/usr/share/logstash/data
  #     # - "./logstashdata/skeleton.conf:/usr/share/logstash/pipeline/skeleton.conf"
  #     # - ./data_engineering2_3/data_engineering2_ws_3_5/skeleton/skeleton.conf:/usr/share/logstash/skeleton.conf
  #     - /usr/local/elasticsearch/data_engineering2_3/data_engineering2_ws_3_5/skeleton/skeleton.conf:/usr/share/logstash/pipeline/skeleton.conf
  #   environment:
  #     - ELASTIC_USER=elastic
  #     - ELASTIC_PASSWORD=ssafy00
  #     - ELASTIC_HOSTS=http://es01:9200

  # #   # command에서 JDBC 드라이버 다운로드 후 기본 Logstash 실행 (Day 3 - ws lv5에서만 사용)
  #   command: >
  #     sh -c 'mkdir -p /usr/share/logstash/ingest_data &&
  #            curl -L -o /usr/share/logstash/ingest_data/postgresql.jar https://jdbc.postgresql.org/download/postgresql-42.5.0.jar &&
  #            chmod 644 /usr/share/logstash/ingest_data/postgresql.jar &&
  #            /usr/share/logstash/bin/logstash -f /usr/share/logstash/pipeline/skeleton.conf'
  #   networks:
  #     - elastic
# /usr/share/logstash/bin/logstash -f /usr/share/logstash/pipeline/skeleton.conf

  # (Day 3 - ws lv5에서만 사용)
#   postgres:
#     image: postgres:13
#     container_name: postgres
#     environment:
#       - POSTGRES_USER=myuser 
#       - POSTGRES_PASSWORD=mypassword
#       - POSTGRES_DB=mydb
#     volumes:
#       - pgdata:/var/lib/postgresql/data
#       # - ./logstashdata/init.sql:/docker-entrypoint-initdb.d/init.sql
#       - /usr/local/elasticsearch/data_engineering2_3/data_engineering2_ws_3_5/skeleton/init.sql:/docker-entrypoint-initdb.d/init.sql
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     networks:
#       - elastic

networks:
  elastic:
    driver: bridge

# volumes:
#   pgdata:
#     driver: local